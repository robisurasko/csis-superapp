{"version":3,"file":"Leads-3c951df5.js","sources":["../../../../frontend/src/components/ListViews/LeadsListView.vue","../../../../frontend/src/pages/Leads.vue"],"sourcesContent":["<template>\n  <ListView\n    :class=\"$attrs.class\"\n    :columns=\"columns\"\n    :rows=\"rows\"\n    :options=\"{\n      getRowRoute: (row) => ({\n        name: 'Lead',\n        params: { leadId: row.name },\n        query: { view: route.query.view, viewType: route.params.viewType },\n      }),\n      selectable: options.selectable,\n      showTooltip: options.showTooltip,\n      resizeColumn: options.resizeColumn,\n    }\"\n    row-key=\"name\"\n    @update:selections=\"(selections) => emit('selectionsChanged', selections)\"\n  >\n    <ListHeader\n      class=\"sm:mx-5 mx-3\"\n      @columnWidthUpdated=\"emit('columnWidthUpdated')\"\n    >\n      <ListHeaderItem\n        v-for=\"column in columns\"\n        :key=\"column.key\"\n        :item=\"column\"\n        @columnWidthUpdated=\"emit('columnWidthUpdated', column)\"\n      >\n        <Button\n          v-if=\"column.key == '_liked_by'\"\n          variant=\"ghosted\"\n          class=\"!h-4\"\n          :class=\"isLikeFilterApplied ? 'fill-red-500' : 'fill-white'\"\n          @click=\"() => emit('applyLikeFilter')\"\n        >\n          <HeartIcon class=\"h-4 w-4\" />\n        </Button>\n      </ListHeaderItem>\n    </ListHeader>\n    <ListRows\n      :rows=\"rows\"\n      v-slot=\"{ idx, column, item, row }\"\n      doctype=\"CRM Lead\"\n    >\n      <div v-if=\"column.key === '_assign'\" class=\"flex items-center\">\n        <MultipleAvatar\n          :avatars=\"item\"\n          size=\"sm\"\n          @click=\"\n            (event) =>\n              emit('applyFilter', {\n                event,\n                idx,\n                column,\n                item,\n                firstColumn: columns[0],\n              })\n          \"\n        />\n      </div>\n      <ListRowItem v-else :item=\"item\" :align=\"column.align\">\n        <template #prefix>\n          <div v-if=\"column.key === 'status'\">\n            <IndicatorIcon :class=\"item.color\" />\n          </div>\n          <div v-else-if=\"column.key === 'lead_name'\">\n            <Avatar\n              v-if=\"item.label\"\n              class=\"flex items-center\"\n              :image=\"item.image\"\n              :label=\"item.image_label\"\n              size=\"sm\"\n            />\n          </div>\n          <div v-else-if=\"column.key === 'organization'\">\n            <Avatar\n              v-if=\"item\"\n              class=\"flex items-center\"\n              :image=\"item\"\n              :label=\"item\"\n              size=\"sm\"\n            />\n          </div>\n          <div v-else-if=\"column.key === 'lead_owner'\">\n            <Avatar\n              v-if=\"item.full_name\"\n              class=\"flex items-center\"\n              :image=\"item.user_image\"\n              :label=\"item.full_name\"\n              size=\"sm\"\n            />\n          </div>\n          <div v-else-if=\"column.key === 'mobile_no'\">\n            <PhoneIcon class=\"h-4 w-4\" />\n          </div>\n        </template>\n        <template #default=\"{ label }\">\n          <div\n            v-if=\"\n              [\n                'modified',\n                'creation',\n                'first_response_time',\n                'first_responded_on',\n                'response_by',\n              ].includes(column.key)\n            \"\n            class=\"truncate text-base\"\n            @click=\"\n              (event) =>\n                emit('applyFilter', {\n                  event,\n                  idx,\n                  column,\n                  item,\n                  firstColumn: columns[0],\n                })\n            \"\n          >\n            <Tooltip :text=\"item.label\">\n              <div>{{ item.timeAgo }}</div>\n            </Tooltip>\n          </div>\n          <div v-else-if=\"column.key === '_liked_by'\">\n            <Button\n              v-if=\"column.key == '_liked_by'\"\n              variant=\"ghosted\"\n              :class=\"isLiked(item) ? 'fill-red-500' : 'fill-white'\"\n              @click.stop.prevent=\"\n                () =>\n                  emit('likeDoc', {\n                    name: row.name,\n                    liked: isLiked(item),\n                  })\n              \"\n            >\n              <HeartIcon class=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <div\n            v-else-if=\"column.key === 'sla_status'\"\n            class=\"truncate text-base\"\n          >\n            <Badge\n              v-if=\"item.value\"\n              :variant=\"'subtle'\"\n              :theme=\"item.color\"\n              size=\"md\"\n              :label=\"item.value\"\n              @click=\"\n                (event) =>\n                  emit('applyFilter', {\n                    event,\n                    idx,\n                    column,\n                    item,\n                    firstColumn: columns[0],\n                  })\n              \"\n            />\n          </div>\n          <div v-else-if=\"column.type === 'Check'\">\n            <FormControl\n              type=\"checkbox\"\n              :modelValue=\"item\"\n              :disabled=\"true\"\n              class=\"text-ink-gray-9\"\n            />\n          </div>\n          <div\n            v-else\n            class=\"truncate text-base\"\n            @click=\"\n              (event) =>\n                emit('applyFilter', {\n                  event,\n                  idx,\n                  column,\n                  item,\n                  firstColumn: columns[0],\n                })\n            \"\n          >\n            {{ label }}\n          </div>\n        </template>\n      </ListRowItem>\n    </ListRows>\n    <ListSelectBanner>\n      <template #actions=\"{ selections, unselectAll }\">\n        <Dropdown\n          :options=\"listBulkActionsRef.bulkActions(selections, unselectAll)\"\n        >\n          <Button icon=\"more-horizontal\" variant=\"ghost\" />\n        </Dropdown>\n      </template>\n    </ListSelectBanner>\n  </ListView>\n  <ListFooter\n    v-if=\"pageLengthCount\"\n    class=\"border-t sm:px-5 px-3 py-2\"\n    v-model=\"pageLengthCount\"\n    :options=\"{\n      rowCount: options.rowCount,\n      totalCount: options.totalCount,\n    }\"\n    @loadMore=\"emit('loadMore')\"\n  />\n  <ListBulkActions ref=\"listBulkActionsRef\" v-model=\"list\" doctype=\"CRM Lead\" />\n</template>\n\n<script setup>\nimport HeartIcon from '@/components/Icons/HeartIcon.vue'\nimport IndicatorIcon from '@/components/Icons/IndicatorIcon.vue'\nimport PhoneIcon from '@/components/Icons/PhoneIcon.vue'\nimport MultipleAvatar from '@/components/MultipleAvatar.vue'\nimport ListBulkActions from '@/components/ListBulkActions.vue'\nimport ListRows from '@/components/ListViews/ListRows.vue'\nimport {\n  Avatar,\n  ListView,\n  ListHeader,\n  ListHeaderItem,\n  ListSelectBanner,\n  ListRowItem,\n  ListFooter,\n  Dropdown,\n  Tooltip,\n} from 'frappe-ui'\nimport { sessionStore } from '@/stores/session'\nimport { ref, computed, watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nconst props = defineProps({\n  rows: {\n    type: Array,\n    required: true,\n  },\n  columns: {\n    type: Array,\n    required: true,\n  },\n  options: {\n    type: Object,\n    default: () => ({\n      selectable: true,\n      showTooltip: true,\n      resizeColumn: false,\n      totalCount: 0,\n      rowCount: 0,\n    }),\n  },\n})\nconst emit = defineEmits([\n  'loadMore',\n  'updatePageCount',\n  'columnWidthUpdated',\n  'applyFilter',\n  'applyLikeFilter',\n  'likeDoc',\n  'selectionsChanged',\n])\n\nconst route = useRoute()\n\nconst pageLengthCount = defineModel()\nconst list = defineModel('list')\n\nconst isLikeFilterApplied = computed(() => {\n  return list.value.params?.filters?._liked_by ? true : false\n})\n\nconst { user } = sessionStore()\n\nfunction isLiked(item) {\n  if (item) {\n    let likedByMe = JSON.parse(item)\n    return likedByMe.includes(user)\n  }\n}\n\nwatch(pageLengthCount, (val, old_value) => {\n  if (val === old_value) return\n  emit('updatePageCount', val)\n})\n\nconst listBulkActionsRef = ref(null)\n\ndefineExpose({\n  customListActions: computed(\n    () => listBulkActionsRef.value?.customListActions,\n  ),\n})\n</script>\n","<template>\n  <LayoutHeader>\n    <template #left-header>\n      <ViewBreadcrumbs v-model=\"viewControls\" routeName=\"Leads\" />\n    </template>\n    <template #right-header>\n      <CustomActions\n        v-if=\"leadsListView?.customListActions\"\n        :actions=\"leadsListView.customListActions\"\n      />\n      <Button\n        variant=\"solid\"\n        :label=\"__('Create')\"\n        @click=\"showLeadModal = true\"\n      >\n        <template #prefix><FeatherIcon name=\"plus\" class=\"h-4\" /></template>\n      </Button>\n    </template>\n  </LayoutHeader>\n  <ViewControls\n    ref=\"viewControls\"\n    v-model=\"leads\"\n    v-model:loadMore=\"loadMore\"\n    v-model:resizeColumn=\"triggerResize\"\n    v-model:updatedPageCount=\"updatedPageCount\"\n    doctype=\"CRM Lead\"\n    :filters=\"{ converted: 0 }\"\n    :options=\"{\n      allowedViews: ['list', 'group_by', 'kanban'],\n    }\"\n  />\n  <KanbanView\n    v-if=\"route.params.viewType == 'kanban'\"\n    v-model=\"leads\"\n    :options=\"{\n      getRoute: (row) => ({\n        name: 'Lead',\n        params: { leadId: row.name },\n        query: { view: route.query.view, viewType: route.params.viewType },\n      }),\n      onNewClick: (column) => onNewClick(column),\n    }\"\n    @update=\"(data) => viewControls.updateKanbanSettings(data)\"\n    @loadMore=\"(columnName) => viewControls.loadMoreKanban(columnName)\"\n  >\n    <template #title=\"{ titleField, itemName }\">\n      <div class=\"flex items-center gap-2\">\n        <div v-if=\"titleField === 'status'\">\n          <IndicatorIcon :class=\"getRow(itemName, titleField).color\" />\n        </div>\n        <div\n          v-else-if=\"\n            titleField === 'organization' && getRow(itemName, titleField).label\n          \"\n        >\n          <Avatar\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, titleField).logo\"\n            :label=\"getRow(itemName, titleField).label\"\n            size=\"sm\"\n          />\n        </div>\n        <div\n          v-else-if=\"\n            titleField === 'lead_name' && getRow(itemName, titleField).label\n          \"\n        >\n          <Avatar\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, titleField).image\"\n            :label=\"getRow(itemName, titleField).image_label\"\n            size=\"sm\"\n          />\n        </div>\n        <div\n          v-else-if=\"\n            titleField === 'lead_owner' &&\n            getRow(itemName, titleField).full_name\n          \"\n        >\n          <Avatar\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, titleField).user_image\"\n            :label=\"getRow(itemName, titleField).full_name\"\n            size=\"sm\"\n          />\n        </div>\n        <div v-else-if=\"titleField === 'mobile_no'\">\n          <PhoneIcon class=\"h-4 w-4\" />\n        </div>\n        <div\n          v-if=\"\n            [\n              'modified',\n              'creation',\n              'first_response_time',\n              'first_responded_on',\n              'response_by',\n            ].includes(titleField)\n          \"\n          class=\"truncate text-base\"\n        >\n          <Tooltip :text=\"getRow(itemName, titleField).label\">\n            <div>{{ getRow(itemName, titleField).timeAgo }}</div>\n          </Tooltip>\n        </div>\n        <div v-else-if=\"titleField === 'sla_status'\" class=\"truncate text-base\">\n          <Badge\n            v-if=\"getRow(itemName, titleField).value\"\n            :variant=\"'subtle'\"\n            :theme=\"getRow(itemName, titleField).color\"\n            size=\"md\"\n            :label=\"getRow(itemName, titleField).value\"\n          />\n        </div>\n        <div\n          v-else-if=\"getRow(itemName, titleField).label\"\n          class=\"truncate text-base\"\n        >\n          {{ getRow(itemName, titleField).label }}\n        </div>\n        <div class=\"text-ink-gray-4\" v-else>{{ __('No Title') }}</div>\n      </div>\n    </template>\n    <template #fields=\"{ fieldName, itemName }\">\n      <div\n        v-if=\"getRow(itemName, fieldName).label\"\n        class=\"truncate flex items-center gap-2\"\n      >\n        <div v-if=\"fieldName === 'status'\">\n          <IndicatorIcon :class=\"getRow(itemName, fieldName).color\" />\n        </div>\n        <div\n          v-else-if=\"\n            fieldName === 'organization' && getRow(itemName, fieldName).label\n          \"\n        >\n          <Avatar\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, fieldName).logo\"\n            :label=\"getRow(itemName, fieldName).label\"\n            size=\"xs\"\n          />\n        </div>\n        <div v-else-if=\"fieldName === 'lead_name'\">\n          <Avatar\n            v-if=\"getRow(itemName, fieldName).label\"\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, fieldName).image\"\n            :label=\"getRow(itemName, fieldName).image_label\"\n            size=\"xs\"\n          />\n        </div>\n        <div v-else-if=\"fieldName === 'lead_owner'\">\n          <Avatar\n            v-if=\"getRow(itemName, fieldName).full_name\"\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, fieldName).user_image\"\n            :label=\"getRow(itemName, fieldName).full_name\"\n            size=\"xs\"\n          />\n        </div>\n        <div\n          v-if=\"\n            [\n              'modified',\n              'creation',\n              'first_response_time',\n              'first_responded_on',\n              'response_by',\n            ].includes(fieldName)\n          \"\n          class=\"truncate text-base\"\n        >\n          <Tooltip :text=\"getRow(itemName, fieldName).label\">\n            <div>{{ getRow(itemName, fieldName).timeAgo }}</div>\n          </Tooltip>\n        </div>\n        <div v-else-if=\"fieldName === 'sla_status'\" class=\"truncate text-base\">\n          <Badge\n            v-if=\"getRow(itemName, fieldName).value\"\n            :variant=\"'subtle'\"\n            :theme=\"getRow(itemName, fieldName).color\"\n            size=\"md\"\n            :label=\"getRow(itemName, fieldName).value\"\n          />\n        </div>\n        <div v-else-if=\"fieldName === '_assign'\" class=\"flex items-center\">\n          <MultipleAvatar\n            :avatars=\"getRow(itemName, fieldName).label\"\n            size=\"xs\"\n          />\n        </div>\n        <div v-else class=\"truncate text-base\">\n          {{ getRow(itemName, fieldName).label }}\n        </div>\n      </div>\n    </template>\n    <template #actions=\"{ itemName }\">\n      <div class=\"flex gap-2 items-center justify-between\">\n        <div class=\"text-ink-gray-5 flex items-center gap-1.5\">\n          <EmailAtIcon class=\"h-4 w-4\" />\n          <span v-if=\"getRow(itemName, '_email_count').label\">\n            {{ getRow(itemName, '_email_count').label }}\n          </span>\n          <span class=\"text-3xl leading-[0]\"> &middot; </span>\n          <NoteIcon class=\"h-4 w-4\" />\n          <span v-if=\"getRow(itemName, '_note_count').label\">\n            {{ getRow(itemName, '_note_count').label }}\n          </span>\n          <span class=\"text-3xl leading-[0]\"> &middot; </span>\n          <TaskIcon class=\"h-4 w-4\" />\n          <span v-if=\"getRow(itemName, '_task_count').label\">\n            {{ getRow(itemName, '_task_count').label }}\n          </span>\n          <span class=\"text-3xl leading-[0]\"> &middot; </span>\n          <CommentIcon class=\"h-4 w-4\" />\n          <span v-if=\"getRow(itemName, '_comment_count').label\">\n            {{ getRow(itemName, '_comment_count').label }}\n          </span>\n        </div>\n        <Dropdown\n          class=\"flex items-center gap-2\"\n          :options=\"actions(itemName)\"\n          variant=\"ghost\"\n          @click.stop.prevent\n        >\n          <Button icon=\"plus\" variant=\"ghost\" />\n        </Dropdown>\n      </div>\n    </template>\n  </KanbanView>\n  <LeadsListView\n    ref=\"leadsListView\"\n    v-else-if=\"leads.data && rows.length\"\n    v-model=\"leads.data.page_length_count\"\n    v-model:list=\"leads\"\n    :rows=\"rows\"\n    :columns=\"leads.data.columns\"\n    :options=\"{\n      showTooltip: false,\n      resizeColumn: true,\n      rowCount: leads.data.row_count,\n      totalCount: leads.data.total_count,\n    }\"\n    @loadMore=\"() => loadMore++\"\n    @columnWidthUpdated=\"() => triggerResize++\"\n    @updatePageCount=\"(count) => (updatedPageCount = count)\"\n    @applyFilter=\"(data) => viewControls.applyFilter(data)\"\n    @applyLikeFilter=\"(data) => viewControls.applyLikeFilter(data)\"\n    @likeDoc=\"(data) => viewControls.likeDoc(data)\"\n    @selectionsChanged=\"\n      (selections) => viewControls.updateSelections(selections)\n    \"\n  />\n  <div v-else-if=\"leads.data\" class=\"flex h-full items-center justify-center\">\n    <div\n      class=\"flex flex-col items-center gap-3 text-xl font-medium text-ink-gray-4\"\n    >\n      <LeadsIcon class=\"h-10 w-10\" />\n      <span>{{ __('No {0} Found', [__('Leads')]) }}</span>\n      <Button :label=\"__('Create')\" @click=\"showLeadModal = true\">\n        <template #prefix><FeatherIcon name=\"plus\" class=\"h-4\" /></template>\n      </Button>\n    </div>\n  </div>\n  <LeadModal\n    v-if=\"showLeadModal\"\n    v-model=\"showLeadModal\"\n    v-model:quickEntry=\"showQuickEntryModal\"\n    :defaults=\"defaults\"\n  />\n  <NoteModal\n    v-if=\"showNoteModal\"\n    v-model=\"showNoteModal\"\n    :note=\"note\"\n    doctype=\"CRM Lead\"\n    :doc=\"docname\"\n  />\n  <TaskModal\n    v-if=\"showTaskModal\"\n    v-model=\"showTaskModal\"\n    :task=\"task\"\n    doctype=\"CRM Lead\"\n    :doc=\"docname\"\n  />\n  <QuickEntryModal v-if=\"showQuickEntryModal\" v-model=\"showQuickEntryModal\" />\n</template>\n\n<script setup>\nimport ViewBreadcrumbs from '@/components/ViewBreadcrumbs.vue'\nimport MultipleAvatar from '@/components/MultipleAvatar.vue'\nimport CustomActions from '@/components/CustomActions.vue'\nimport EmailAtIcon from '@/components/Icons/EmailAtIcon.vue'\nimport PhoneIcon from '@/components/Icons/PhoneIcon.vue'\nimport NoteIcon from '@/components/Icons/NoteIcon.vue'\nimport TaskIcon from '@/components/Icons/TaskIcon.vue'\nimport CommentIcon from '@/components/Icons/CommentIcon.vue'\nimport IndicatorIcon from '@/components/Icons/IndicatorIcon.vue'\nimport LeadsIcon from '@/components/Icons/LeadsIcon.vue'\nimport LayoutHeader from '@/components/LayoutHeader.vue'\nimport LeadsListView from '@/components/ListViews/LeadsListView.vue'\nimport KanbanView from '@/components/Kanban/KanbanView.vue'\nimport LeadModal from '@/components/Modals/LeadModal.vue'\nimport NoteModal from '@/components/Modals/NoteModal.vue'\nimport TaskModal from '@/components/Modals/TaskModal.vue'\nimport QuickEntryModal from '@/components/Modals/QuickEntryModal.vue'\nimport ViewControls from '@/components/ViewControls.vue'\nimport { getMeta } from '@/stores/meta'\nimport { globalStore } from '@/stores/global'\nimport { usersStore } from '@/stores/users'\nimport { statusesStore } from '@/stores/statuses'\nimport { callEnabled } from '@/composables/settings'\nimport { formatDate, timeAgo, website, formatTime } from '@/utils'\nimport { Avatar, Tooltip, Dropdown } from 'frappe-ui'\nimport { useRoute } from 'vue-router'\nimport { ref, computed, reactive, h } from 'vue'\n\nconst { getFormattedPercent, getFormattedFloat, getFormattedCurrency } =\n  getMeta('CRM Lead')\nconst { makeCall } = globalStore()\nconst { getUser } = usersStore()\nconst { getLeadStatus } = statusesStore()\n\nconst route = useRoute()\n\nconst leadsListView = ref(null)\nconst showLeadModal = ref(false)\nconst showQuickEntryModal = ref(false)\n\nconst defaults = reactive({})\n\n// leads data is loaded in the ViewControls component\nconst leads = ref({})\nconst loadMore = ref(1)\nconst triggerResize = ref(1)\nconst updatedPageCount = ref(20)\nconst viewControls = ref(null)\n\nfunction getRow(name, field) {\n  function getValue(value) {\n    if (value && typeof value === 'object' && !Array.isArray(value)) {\n      return value\n    }\n    return { label: value }\n  }\n  return getValue(rows.value?.find((row) => row.name == name)[field])\n}\n\n// Rows\nconst rows = computed(() => {\n  if (!leads.value?.data?.data) return []\n  if (leads.value.data.view_type === 'group_by') {\n    if (!leads.value?.data.group_by_field?.fieldname) return []\n    return getGroupedByRows(\n      leads.value?.data.data,\n      leads.value?.data.group_by_field,\n      leads.value.data.columns,\n    )\n  } else if (leads.value.data.view_type === 'kanban') {\n    return getKanbanRows(leads.value.data.data, leads.value.data.fields)\n  } else {\n    return parseRows(leads.value?.data.data, leads.value.data.columns)\n  }\n})\n\nfunction getGroupedByRows(listRows, groupByField, columns) {\n  let groupedRows = []\n\n  groupByField.options?.forEach((option) => {\n    let filteredRows = []\n\n    if (!option) {\n      filteredRows = listRows.filter((row) => !row[groupByField.fieldname])\n    } else {\n      filteredRows = listRows.filter(\n        (row) => row[groupByField.fieldname] == option,\n      )\n    }\n\n    let groupDetail = {\n      label: groupByField.label,\n      group: option || __(' '),\n      collapsed: false,\n      rows: parseRows(filteredRows, columns),\n    }\n    if (groupByField.fieldname == 'status') {\n      groupDetail.icon = () =>\n        h(IndicatorIcon, {\n          class: getLeadStatus(option)?.color,\n        })\n    }\n    groupedRows.push(groupDetail)\n  })\n\n  return groupedRows || listRows\n}\n\nfunction getKanbanRows(data, columns) {\n  let _rows = []\n  data.forEach((column) => {\n    column.data?.forEach((row) => {\n      _rows.push(row)\n    })\n  })\n  return parseRows(_rows, columns)\n}\n\nfunction parseRows(rows, columns = []) {\n  let view_type = leads.value.data.view_type\n  let key = view_type === 'kanban' ? 'fieldname' : 'key'\n  let type = view_type === 'kanban' ? 'fieldtype' : 'type'\n\n  return rows.map((lead) => {\n    let _rows = {}\n    leads.value?.data.rows.forEach((row) => {\n      _rows[row] = lead[row]\n\n      let fieldType = columns?.find((col) => (col[key] || col.value) == row)?.[\n        type\n      ]\n\n      if (\n        fieldType &&\n        ['Date', 'Datetime'].includes(fieldType) &&\n        !['modified', 'creation'].includes(row)\n      ) {\n        _rows[row] = formatDate(lead[row], '', true, fieldType == 'Datetime')\n      }\n\n      if (fieldType && fieldType == 'Currency') {\n        _rows[row] = getFormattedCurrency(row, lead)\n      }\n\n      if (fieldType && fieldType == 'Float') {\n        _rows[row] = getFormattedFloat(row, lead)\n      }\n\n      if (fieldType && fieldType == 'Percent') {\n        _rows[row] = getFormattedPercent(row, lead)\n      }\n\n      if (row == 'lead_name') {\n        _rows[row] = {\n          label: lead.lead_name,\n          image: lead.image,\n          image_label: lead.first_name,\n        }\n      } else if (row == 'organization') {\n        _rows[row] = lead.organization\n      } else if (row === 'website') {\n        _rows[row] = website(lead.website)\n      } else if (row == 'status') {\n        _rows[row] = {\n          label: lead.status,\n          color: getLeadStatus(lead.status)?.color,\n        }\n      } else if (row == 'sla_status') {\n        let value = lead.sla_status\n        let tooltipText = value\n        let color =\n          lead.sla_status == 'Failed'\n            ? 'red'\n            : lead.sla_status == 'Fulfilled'\n              ? 'green'\n              : 'orange'\n        if (value == 'First Response Due') {\n          value = __(timeAgo(lead.response_by))\n          tooltipText = formatDate(lead.response_by)\n          if (new Date(lead.response_by) < new Date()) {\n            color = 'red'\n          }\n        }\n        _rows[row] = {\n          label: tooltipText,\n          value: value,\n          color: color,\n        }\n      } else if (row == 'lead_owner') {\n        _rows[row] = {\n          label: lead.lead_owner && getUser(lead.lead_owner).full_name,\n          ...(lead.lead_owner && getUser(lead.lead_owner)),\n        }\n      } else if (row == '_assign') {\n        let assignees = JSON.parse(lead._assign || '[]')\n        _rows[row] = assignees.map((user) => ({\n          name: user,\n          image: getUser(user).user_image,\n          label: getUser(user).full_name,\n        }))\n      } else if (['modified', 'creation'].includes(row)) {\n        _rows[row] = {\n          label: formatDate(lead[row]),\n          timeAgo: __(timeAgo(lead[row])),\n        }\n      } else if (\n        ['first_response_time', 'first_responded_on', 'response_by'].includes(\n          row,\n        )\n      ) {\n        let field = row == 'response_by' ? 'response_by' : 'first_responded_on'\n        _rows[row] = {\n          label: lead[field] ? formatDate(lead[field]) : '',\n          timeAgo: lead[row]\n            ? row == 'first_response_time'\n              ? formatTime(lead[row])\n              : __(timeAgo(lead[row]))\n            : '',\n        }\n      }\n    })\n    _rows['_email_count'] = lead._email_count\n    _rows['_note_count'] = lead._note_count\n    _rows['_task_count'] = lead._task_count\n    _rows['_comment_count'] = lead._comment_count\n    return _rows\n  })\n}\n\nfunction onNewClick(column) {\n  let column_field = leads.value.params.column_field\n\n  if (column_field) {\n    defaults[column_field] = column.column.name\n  }\n\n  showLeadModal.value = true\n}\n\nfunction actions(itemName) {\n  let mobile_no = getRow(itemName, 'mobile_no')?.label || ''\n  let actions = [\n    {\n      icon: h(PhoneIcon, { class: 'h-4 w-4' }),\n      label: __('Make a Call'),\n      onClick: () => makeCall(mobile_no),\n      condition: () => mobile_no && callEnabled.value,\n    },\n    {\n      icon: h(NoteIcon, { class: 'h-4 w-4' }),\n      label: __('New Note'),\n      onClick: () => showNote(itemName),\n    },\n    {\n      icon: h(TaskIcon, { class: 'h-4 w-4' }),\n      label: __('New Task'),\n      onClick: () => showTask(itemName),\n    },\n  ]\n  return actions.filter((action) =>\n    action.condition ? action.condition() : true,\n  )\n}\n\nconst docname = ref('')\nconst showNoteModal = ref(false)\nconst note = ref({\n  title: '',\n  content: '',\n})\n\nfunction showNote(name) {\n  docname.value = name\n  showNoteModal.value = true\n}\n\nconst showTaskModal = ref(false)\nconst task = ref({\n  title: '',\n  description: '',\n  assigned_to: '',\n  due_date: '',\n  priority: 'Low',\n  status: 'Backlog',\n})\n\nfunction showTask(name) {\n  docname.value = name\n  showTaskModal.value = true\n}\n</script>\n"],"names":["emit","__emit","route","useRoute","pageLengthCount","_useModel","__props","list","isLikeFilterApplied","computed","_b","_a","user","sessionStore","isLiked","item","watch","val","old_value","listBulkActionsRef","ref","__expose","getFormattedPercent","getFormattedFloat","getFormattedCurrency","getMeta","makeCall","globalStore","getUser","usersStore","getLeadStatus","statusesStore","leadsListView","showLeadModal","showQuickEntryModal","defaults","reactive","leads","loadMore","triggerResize","updatedPageCount","viewControls","getRow","name","field","getValue","value","rows","row","_d","_c","getGroupedByRows","_e","_f","getKanbanRows","parseRows","_g","listRows","groupByField","columns","groupedRows","option","filteredRows","groupDetail","h","IndicatorIcon","data","_rows","column","view_type","key","type","lead","fieldType","col","formatDate","website","tooltipText","color","timeAgo","assignees","formatTime","onNewClick","column_field","actions","itemName","mobile_no","PhoneIcon","callEnabled","NoteIcon","showNote","TaskIcon","showTask","action","docname","showNoteModal","note","showTaskModal","task"],"mappings":"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"}