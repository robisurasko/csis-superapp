{"version":3,"file":"Contacts-459490d6.js","sources":["../../../../frontend/src/pages/Contacts.vue"],"sourcesContent":["<template>\n  <LayoutHeader>\n    <template #left-header>\n      <ViewBreadcrumbs v-model=\"viewControls\" routeName=\"Contacts\" />\n    </template>\n    <template #right-header>\n      <CustomActions\n        v-if=\"contactsListView?.customListActions\"\n        :actions=\"contactsListView.customListActions\"\n      />\n      <Button\n        variant=\"solid\"\n        :label=\"__('Create')\"\n        @click=\"showContactModal = true\"\n      >\n        <template #prefix><FeatherIcon name=\"plus\" class=\"h-4\" /></template>\n      </Button>\n    </template>\n  </LayoutHeader>\n  <ViewControls\n    ref=\"viewControls\"\n    v-model=\"contacts\"\n    v-model:loadMore=\"loadMore\"\n    v-model:resizeColumn=\"triggerResize\"\n    v-model:updatedPageCount=\"updatedPageCount\"\n    doctype=\"Contact\"\n  />\n  <ContactsListView\n    ref=\"contactsListView\"\n    v-if=\"contacts.data && rows.length\"\n    v-model=\"contacts.data.page_length_count\"\n    v-model:list=\"contacts\"\n    :rows=\"rows\"\n    :columns=\"contacts.data.columns\"\n    :options=\"{\n      showTooltip: false,\n      resizeColumn: true,\n      rowCount: contacts.data.row_count,\n      totalCount: contacts.data.total_count,\n    }\"\n    @loadMore=\"() => loadMore++\"\n    @columnWidthUpdated=\"() => triggerResize++\"\n    @updatePageCount=\"(count) => (updatedPageCount = count)\"\n    @applyFilter=\"(data) => viewControls.applyFilter(data)\"\n    @applyLikeFilter=\"(data) => viewControls.applyLikeFilter(data)\"\n    @likeDoc=\"(data) => viewControls.likeDoc(data)\"\n    @selectionsChanged=\"\n      (selections) => viewControls.updateSelections(selections)\n    \"\n  />\n  <div\n    v-else-if=\"contacts.data\"\n    class=\"flex h-full items-center justify-center\"\n  >\n    <div\n      class=\"flex flex-col items-center gap-3 text-xl font-medium text-ink-gray-4\"\n    >\n      <ContactsIcon class=\"h-10 w-10\" />\n      <span>{{ __('No {0} Found', [__('Contacts')]) }}</span>\n      <Button :label=\"__('Create')\" @click=\"showContactModal = true\">\n        <template #prefix><FeatherIcon name=\"plus\" class=\"h-4\" /></template>\n      </Button>\n    </div>\n  </div>\n  <ContactModal\n    v-model=\"showContactModal\"\n    v-model:showQuickEntryModal=\"showQuickEntryModal\"\n    :contact=\"{}\"\n    @openAddressModal=\"(_address) => openAddressModal(_address)\"\n  />\n  <QuickEntryModal\n    v-if=\"showQuickEntryModal\"\n    v-model=\"showQuickEntryModal\"\n    doctype=\"Contact\"\n  />\n  <AddressModal v-model=\"showAddressModal\" v-model:address=\"address\" />\n</template>\n\n<script setup>\nimport ViewBreadcrumbs from '@/components/ViewBreadcrumbs.vue'\nimport CustomActions from '@/components/CustomActions.vue'\nimport ContactsIcon from '@/components/Icons/ContactsIcon.vue'\nimport LayoutHeader from '@/components/LayoutHeader.vue'\nimport ContactModal from '@/components/Modals/ContactModal.vue'\nimport QuickEntryModal from '@/components/Modals/QuickEntryModal.vue'\nimport AddressModal from '@/components/Modals/AddressModal.vue'\nimport ContactsListView from '@/components/ListViews/ContactsListView.vue'\nimport ViewControls from '@/components/ViewControls.vue'\nimport { getMeta } from '@/stores/meta'\nimport { organizationsStore } from '@/stores/organizations.js'\nimport { formatDate, timeAgo } from '@/utils'\nimport { call } from 'frappe-ui'\nimport { ref, computed } from 'vue'\n\nconst { getFormattedPercent, getFormattedFloat, getFormattedCurrency } =\n  getMeta('Contact')\nconst { getOrganization } = organizationsStore()\n\nconst showContactModal = ref(false)\nconst showQuickEntryModal = ref(false)\nconst showAddressModal = ref(false)\n\nconst contactsListView = ref(null)\n\n// contacts data is loaded in the ViewControls component\nconst contacts = ref({})\nconst address = ref({})\nconst loadMore = ref(1)\nconst triggerResize = ref(1)\nconst updatedPageCount = ref(20)\nconst viewControls = ref(null)\n\nconst rows = computed(() => {\n  if (\n    !contacts.value?.data?.data ||\n    !['list', 'group_by'].includes(contacts.value.data.view_type)\n  )\n    return []\n  return contacts.value?.data.data.map((contact) => {\n    let _rows = {}\n    contacts.value?.data.rows.forEach((row) => {\n      _rows[row] = contact[row]\n\n      let fieldType = contacts.value?.data.columns?.find(\n        (col) => (col.key || col.value) == row,\n      )?.type\n\n      if (\n        fieldType &&\n        ['Date', 'Datetime'].includes(fieldType) &&\n        !['modified', 'creation'].includes(row)\n      ) {\n        _rows[row] = formatDate(contact[row], '', true, fieldType == 'Datetime')\n      }\n\n      if (fieldType && fieldType == 'Currency') {\n        _rows[row] = getFormattedCurrency(row, contact)\n      }\n\n      if (fieldType && fieldType == 'Float') {\n        _rows[row] = getFormattedFloat(row, contact)\n      }\n\n      if (fieldType && fieldType == 'Percent') {\n        _rows[row] = getFormattedPercent(row, contact)\n      }\n\n      if (row == 'full_name') {\n        _rows[row] = {\n          label: contact.full_name,\n          image_label: contact.full_name,\n          image: contact.image,\n        }\n      } else if (row == 'company_name') {\n        _rows[row] = {\n          label: contact.company_name,\n          logo: getOrganization(contact.company_name)?.organization_logo,\n        }\n      } else if (['modified', 'creation'].includes(row)) {\n        _rows[row] = {\n          label: formatDate(contact[row]),\n          timeAgo: __(timeAgo(contact[row])),\n        }\n      }\n    })\n    return _rows\n  })\n})\n\nasync function openAddressModal(_address) {\n  if (_address) {\n    _address = await call('frappe.client.get', {\n      doctype: 'Address',\n      name: _address,\n    })\n  }\n  showAddressModal.value = true\n  address.value = _address || {}\n}\n</script>\n"],"names":["getFormattedPercent","getFormattedFloat","getFormattedCurrency","getMeta","getOrganization","organizationsStore","showContactModal","ref","showQuickEntryModal","showAddressModal","contactsListView","contacts","address","loadMore","triggerResize","updatedPageCount","viewControls","rows","computed","_b","_a","_c","contact","_rows","row","fieldType","col","formatDate","_d","timeAgo","openAddressModal","_address","call"],"mappings":"60CA8FA,KAAM,CAAE,oBAAAA,EAAqB,kBAAAC,EAAmB,qBAAAC,CAAsB,EACpEC,EAAQ,SAAS,EACb,CAAE,gBAAAC,CAAiB,EAAGC,EAAmB,EAEzCC,EAAmBC,EAAI,EAAK,EAC5BC,EAAsBD,EAAI,EAAK,EAC/BE,EAAmBF,EAAI,EAAK,EAE5BG,EAAmBH,EAAI,IAAI,EAG3BI,EAAWJ,EAAI,EAAE,EACjBK,EAAUL,EAAI,EAAE,EAChBM,EAAWN,EAAI,CAAC,EAChBO,EAAgBP,EAAI,CAAC,EACrBQ,EAAmBR,EAAI,EAAE,EACzBS,EAAeT,EAAI,IAAI,EAEvBU,EAAOC,EAAS,IAAM,WAC1B,MACE,GAACC,GAAAC,EAAAT,EAAS,QAAT,YAAAS,EAAgB,OAAhB,MAAAD,EAAsB,OACvB,CAAC,CAAC,OAAQ,UAAU,EAAE,SAASR,EAAS,MAAM,KAAK,SAAS,EAErD,CAAC,GACHU,EAAAV,EAAS,QAAT,YAAAU,EAAgB,KAAK,KAAK,IAAKC,GAAY,OAChD,IAAIC,EAAQ,CAAC,EACb,OAAAH,EAAAT,EAAS,QAAT,MAAAS,EAAgB,KAAK,KAAK,QAASI,GAAQ,aACzCD,EAAMC,CAAG,EAAIF,EAAQE,CAAG,EAExB,IAAIC,GAAYJ,GAAAF,GAAAC,EAAAT,EAAS,QAAT,YAAAS,EAAgB,KAAK,UAArB,YAAAD,EAA8B,KAC3CO,IAASA,EAAI,KAAOA,EAAI,QAAUF,KADrB,YAAAH,EAEb,KAGDI,GACA,CAAC,OAAQ,UAAU,EAAE,SAASA,CAAS,GACvC,CAAC,CAAC,WAAY,UAAU,EAAE,SAASD,CAAG,IAEtCD,EAAMC,CAAG,EAAIG,EAAWL,EAAQE,CAAG,EAAG,GAAI,GAAMC,GAAa,UAAU,GAGrEA,GAAaA,GAAa,aAC5BF,EAAMC,CAAG,EAAItB,EAAqBsB,EAAKF,CAAO,GAG5CG,GAAaA,GAAa,UAC5BF,EAAMC,CAAG,EAAIvB,EAAkBuB,EAAKF,CAAO,GAGzCG,GAAaA,GAAa,YAC5BF,EAAMC,CAAG,EAAIxB,EAAoBwB,EAAKF,CAAO,GAG3CE,GAAO,YACTD,EAAMC,CAAG,EAAI,CACX,MAAOF,EAAQ,UACf,YAAaA,EAAQ,UACrB,MAAOA,EAAQ,KACjB,EACSE,GAAO,eAChBD,EAAMC,CAAG,EAAI,CACX,MAAOF,EAAQ,aACf,MAAMM,EAAAxB,EAAgBkB,EAAQ,YAAY,IAApC,YAAAM,EAAuC,iBAC/C,EACS,CAAC,WAAY,UAAU,EAAE,SAASJ,CAAG,IAC9CD,EAAMC,CAAG,EAAI,CACX,MAAOG,EAAWL,EAAQE,CAAG,CAAC,EAC9B,QAAS,GAAGK,EAAQP,EAAQE,CAAG,CAAC,CAAC,CACnC,EAER,GACWD,CACX,EACA,CAAC,EAED,eAAeO,EAAiBC,EAAU,CACpCA,IACFA,EAAW,MAAMC,GAAK,oBAAqB,CACzC,QAAS,UACT,KAAMD,CACZ,CAAK,GAEHtB,EAAiB,MAAQ,GACzBG,EAAQ,MAAQmB,GAAY,CAAC,CAC/B"}