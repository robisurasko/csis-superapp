{"version":3,"file":"IconPicker-0c2832fa.js","sources":["../../../../frontend/src/components/frappe-ui/Dropdown.vue","../../../../frontend/src/components/Icons/CheckIcon.vue","../../../../frontend/src/components/IconPicker.vue"],"sourcesContent":["<template>\n  <Menu as=\"div\" class=\"relative inline-block text-left\" v-slot=\"{ open }\">\n    <Popover\n      :transition=\"dropdownTransition\"\n      :show=\"open\"\n      :placement=\"popoverPlacement\"\n    >\n      <template #target=\"{ togglePopover }\">\n        <MenuButton as=\"template\">\n          <slot v-if=\"$slots.default\" v-bind=\"{ open, togglePopover }\" />\n          <Button v-else :active=\"open\" v-bind=\"button\">\n            {{ button ? button?.label || null : 'Options' }}\n          </Button>\n        </MenuButton>\n      </template>\n\n      <template #body>\n        <div\n          class=\"mt-2 min-w-40 divide-y divide-outline-gray-modals rounded-lg bg-surface-modal shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none\"\n          :class=\"{\n            'mt-2': ['bottom', 'left', 'right'].includes(placement),\n            'ml-2': placement == 'right-start',\n          }\"\n        >\n          <MenuItems\n            class=\"min-w-40 divide-y divide-outline-gray-modals\"\n            :class=\"{\n              'left-0 origin-top-left': placement == 'left',\n              'right-0 origin-top-right': placement == 'right',\n              'inset-x-0 origin-top': placement == 'center',\n              'mt-0 origin-top-right': placement == 'right-start',\n            }\"\n          >\n            <div v-for=\"group in groups\" :key=\"group.key\" class=\"p-1.5\">\n              <div\n                v-if=\"group.group && !group.hideLabel\"\n                class=\"flex h-7 items-center px-2 text-sm font-medium text-ink-gray-4\"\n              >\n                {{ group.group }}\n              </div>\n              <MenuItem\n                v-for=\"item in group.items\"\n                :key=\"item.label\"\n                v-slot=\"{ active }\"\n              >\n                <slot name=\"item\" v-bind=\"{ item, active }\">\n                  <component\n                    v-if=\"item.component\"\n                    :is=\"item.component\"\n                    :active=\"active\"\n                  />\n                  <button\n                    v-else\n                    :class=\"[\n                      active ? 'bg-surface-gray-3' : 'text-ink-gray-6',\n                      'group flex h-7 w-full items-center rounded px-2 text-base',\n                    ]\"\n                    @click=\"item.onClick\"\n                  >\n                    <FeatherIcon\n                      v-if=\"item.icon && typeof item.icon === 'string'\"\n                      :name=\"item.icon\"\n                      class=\"mr-2 h-4 w-4 flex-shrink-0 text-ink-gray-7\"\n                      aria-hidden=\"true\"\n                    />\n                    <component\n                      class=\"mr-2 h-4 w-4 flex-shrink-0 text-ink-gray-7\"\n                      v-else-if=\"item.icon\"\n                      :is=\"item.icon\"\n                    />\n                    <span class=\"whitespace-nowrap text-ink-gray-7\">\n                      {{ item.label }}\n                    </span>\n                  </button>\n                </slot>\n              </MenuItem>\n            </div>\n          </MenuItems>\n          <div v-if=\"slots.footer\" class=\"border-t p-1.5\">\n            <slot name=\"footer\"></slot>\n          </div>\n        </div>\n      </template>\n    </Popover>\n  </Menu>\n</template>\n\n<script setup>\nimport { Menu, MenuButton, MenuItems, MenuItem } from '@headlessui/vue'\nimport { Popover, Button, FeatherIcon } from 'frappe-ui'\nimport { computed, useSlots } from 'vue'\nimport { useRouter } from 'vue-router'\n\nconst props = defineProps({\n  button: {\n    type: Object,\n    default: null,\n  },\n  options: {\n    type: Array,\n    default: () => [],\n  },\n  placement: {\n    type: String,\n    default: 'left',\n  },\n})\n\nconst router = useRouter()\nconst slots = useSlots()\n\nconst dropdownTransition = {\n  enterActiveClass: 'transition duration-100 ease-out',\n  enterFromClass: 'transform scale-95 opacity-0',\n  enterToClass: 'transform scale-100 opacity-100',\n  leaveActiveClass: 'transition duration-75 ease-in',\n  leaveFromClass: 'transform scale-100 opacity-100',\n  leaveToClass: 'transform scale-95 opacity-0',\n}\n\nconst groups = computed(() => {\n  let groups = props.options[0]?.group\n    ? props.options\n    : [{ group: '', items: props.options }]\n\n  return groups.map((group, i) => {\n    return {\n      key: i,\n      group: group.group,\n      hideLabel: group.hideLabel || false,\n      items: filterOptions(group.items),\n    }\n  })\n})\n\nconst popoverPlacement = computed(() => {\n  if (props.placement === 'left') return 'bottom-start'\n  if (props.placement === 'right') return 'bottom-end'\n  if (props.placement === 'center') return 'bottom-center'\n  if (props.placement === 'right-start') return 'right-start'\n  return 'bottom'\n})\n\nfunction normalizeDropdownItem(option) {\n  let onClick = option.onClick || null\n  if (!onClick && option.route && router) {\n    onClick = () => router.push(option.route)\n  }\n\n  return {\n    name: option.name,\n    label: option.label,\n    icon: option.icon,\n    group: option.group,\n    component: option.component,\n    onClick,\n  }\n}\n\nfunction filterOptions(options) {\n  return (options || [])\n    .filter(Boolean)\n    .filter((option) => (option.condition ? option.condition() : true))\n    .map((option) => normalizeDropdownItem(option))\n}\n</script>\n","<template>\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    stroke-width=\"2\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n    class=\"lucide lucide-check\"\n  >\n    <path d=\"M20 6 9 17l-5-5\" />\n  </svg>\n</template>\n","<template>\n  <Popover transition=\"default\">\n    <template #target=\"{ togglePopover, isOpen }\">\n      <slot v-bind=\"{ isOpen, togglePopover }\">\n        <span class=\"text-base\"> {{ modelValue || '' }} </span>\n      </slot>\n    </template>\n    <template #body=\"{ togglePopover }\">\n      <div\n        v-if=\"reaction\"\n        class=\"px-2 py-1 flex items-center justify-center gap-2 rounded-full bg-surface-modal shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none\"\n      >\n        <div\n          class=\"size-5 cursor-pointer rounded-full bg-surface-transparent text-xl\"\n          v-for=\"r in reactionEmojis\"\n          :key=\"r\"\n          @click=\"() => (emoji = r) && togglePopover()\"\n        >\n          <button>\n            {{ r }}\n          </button>\n        </div>\n        <Button\n          class=\"rounded-full\"\n          icon=\"plus\"\n          @click.stop=\"() => (reaction = false)\"\n        />\n      </div>\n      <div\n        v-else\n        class=\"my-3 max-w-max transform bg-surface-white px-4 sm:px-0\"\n      >\n        <div\n          class=\"relative max-h-96 pb-3 overflow-y-auto min-w-40 rounded-lg bg-surface-modal shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none\"\n        >\n          <div class=\"flex gap-2 px-3 pb-1 pt-3\">\n            <div class=\"flex-1\">\n              <FormControl\n                type=\"text\"\n                placeholder=\"Search by keyword\"\n                v-model=\"search\"\n                :debounce=\"300\"\n              />\n            </div>\n            <Button @click=\"setRandom\">Random</Button>\n          </div>\n          <div class=\"w-96\"></div>\n          <div class=\"px-3\" v-for=\"(emojis, group) in emojiGroups\" :key=\"group\">\n            <div\n              class=\"sticky top-0 bg-surface-modal pb-2 pt-3 text-sm text-ink-gray-7\"\n            >\n              {{ group }}\n            </div>\n            <div class=\"grid w-96 grid-cols-12 place-items-center\">\n              <button\n                class=\"h-8 w-8 rounded-md p-1 text-2xl hover:bg-surface-gray-2 focus:outline-none focus:ring focus:ring-blue-200\"\n                v-for=\"_emoji in emojis\"\n                :key=\"_emoji.description\"\n                @click=\"() => (emoji = _emoji.emoji) && togglePopover()\"\n                :title=\"_emoji.description\"\n              >\n                {{ _emoji.emoji }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </template>\n  </Popover>\n</template>\n<script setup>\nimport Popover from '@/components/frappe-ui/Popover.vue'\nimport { gemoji } from 'gemoji'\nimport { ref, computed } from 'vue'\n\nconst search = ref('')\nconst emoji = defineModel()\nconst reaction = defineModel('reaction')\n\nconst reactionEmojis = ref(['👍', '❤️', '😂', '😮', '😢', '🙏'])\n\nconst emojiGroups = computed(() => {\n  let groups = {}\n  for (let _emoji of gemoji) {\n    if (search.value) {\n      let keywords = [_emoji.description, ..._emoji.names, ..._emoji.tags]\n        .join(' ')\n        .toLowerCase()\n      if (!keywords.includes(search.value.toLowerCase())) {\n        continue\n      }\n    }\n\n    let group = groups[_emoji.category]\n    if (!group) {\n      groups[_emoji.category] = []\n      group = groups[_emoji.category]\n    }\n    group.push(_emoji)\n  }\n  if (!Object.keys(groups).length) {\n    groups['No results'] = []\n  }\n  return groups\n})\n\nfunction setRandom() {\n  let total = gemoji.length\n  let index = randomInt(0, total - 1)\n  emoji.value = gemoji[index].emoji\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\ndefineExpose({ setRandom })\n</script>\n"],"names":["props","__props","router","useRouter","slots","useSlots","dropdownTransition","groups","computed","_a","group","i","filterOptions","popoverPlacement","normalizeDropdownItem","option","onClick","options","_hoisted_1","_sfc_render","_ctx","_cache","_openBlock","_createElementBlock","search","ref","emoji","_useModel","reaction","reactionEmojis","emojiGroups","_emoji","gemoji","setRandom","total","index","randomInt","min","max","__expose"],"mappings":"mvBA6FA,MAAMA,EAAQC,EAeRC,EAASC,EAAU,EACnBC,EAAQC,EAAS,EAEjBC,EAAqB,CACzB,iBAAkB,mCAClB,eAAgB,+BAChB,aAAc,kCACd,iBAAkB,iCAClB,eAAgB,kCAChB,aAAc,8BAChB,EAEMC,EAASC,EAAS,IAAM,OAK5B,QAJaC,EAAAT,EAAM,QAAQ,CAAC,IAAf,MAAAS,EAAkB,MAC3BT,EAAM,QACN,CAAC,CAAE,MAAO,GAAI,MAAOA,EAAM,OAAO,CAAE,GAE1B,IAAI,CAACU,EAAOC,KACjB,CACL,IAAKA,EACL,MAAOD,EAAM,MACb,UAAWA,EAAM,WAAa,GAC9B,MAAOE,EAAcF,EAAM,KAAK,CAClC,EACD,CACH,CAAC,EAEKG,EAAmBL,EAAS,IAC5BR,EAAM,YAAc,OAAe,eACnCA,EAAM,YAAc,QAAgB,aACpCA,EAAM,YAAc,SAAiB,gBACrCA,EAAM,YAAc,cAAsB,cACvC,QACR,EAED,SAASc,EAAsBC,EAAQ,CACrC,IAAIC,EAAUD,EAAO,SAAW,KAChC,MAAI,CAACC,GAAWD,EAAO,OAASb,IAC9Bc,EAAU,IAAMd,EAAO,KAAKa,EAAO,KAAK,GAGnC,CACL,KAAMA,EAAO,KACb,MAAOA,EAAO,MACd,KAAMA,EAAO,KACb,MAAOA,EAAO,MACd,UAAWA,EAAO,UAClB,QAAAC,CACF,CACF,CAEA,SAASJ,EAAcK,EAAS,CAC9B,OAAQA,GAAW,CAAE,GAClB,OAAO,OAAO,EACd,OAAQF,GAAYA,EAAO,UAAYA,EAAO,UAAS,EAAK,EAAK,EACjE,IAAKA,GAAWD,EAAsBC,CAAM,CAAC,CAClD,46DClKIG,GAAkC,CAClC,MAAM,6BACN,WACA,YACA,QAAW,YACX,KAAM,OACN,OAAA,eACA,eAAc,IACd,yBACA,kBAA2B,qCAV7B,SAAAC,GAAAC,EAAAC,EAAA,QAY8BC,EAAA,EAAAC,EAAH,MAAAL,GAAAG,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAA,62BC8D7B,MAAMG,EAASC,EAAI,EAAE,EACfC,EAAQC,EAAY1B,EAAA,YAAA,EACpB2B,EAAWD,EAAY1B,EAAA,UAAU,EAEjC4B,EAAiBJ,EAAI,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,IAAI,CAAC,EAEzDK,EAActB,EAAS,IAAM,CACjC,IAAID,EAAS,CAAC,EACd,QAASwB,KAAUC,EAAQ,CACzB,GAAIR,EAAO,OAIL,CAHW,CAACO,EAAO,YAAa,GAAGA,EAAO,MAAO,GAAGA,EAAO,IAAI,EAChE,KAAK,GAAG,EACR,YAAY,EACD,SAASP,EAAO,MAAM,YAAW,CAAE,EAC/C,SAIJ,IAAId,EAAQH,EAAOwB,EAAO,QAAQ,EAC7BrB,IACHH,EAAOwB,EAAO,QAAQ,EAAI,CAAC,EAC3BrB,EAAQH,EAAOwB,EAAO,QAAQ,GAEhCrB,EAAM,KAAKqB,CAAM,CACnB,CACA,OAAK,OAAO,KAAKxB,CAAM,EAAE,SACvBA,EAAO,YAAY,EAAI,CAAC,GAEnBA,CACT,CAAC,EAED,SAAS0B,GAAY,CACnB,IAAIC,EAAQF,EAAO,OACfG,EAAQC,EAAU,EAAGF,EAAQ,CAAC,EAClCR,EAAM,MAAQM,EAAOG,CAAK,EAAE,KAC9B,CAEA,SAASC,EAAUC,EAAKC,EAAK,CAC3B,OAAO,KAAK,MAAM,KAAK,OAAM,GAAMA,EAAMD,EAAM,GAAKA,CAAG,CACzD,CAEA,OAAAE,EAAa,CAAE,UAAAN,CAAS,CAAE"}